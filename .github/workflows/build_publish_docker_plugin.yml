name: Release Build for Docker Plugin

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        default: true

jobs:
  build_docker_plugin:
    name: Build docker plugin job
    runs-on: ubuntu-latest
    steps:
      - name: Free some space
        run: |
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet || true
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up manifest/config for plugin
        shell: bash
        run: |
          # 假定你仓库有contrib/docker-plugin/rootfs和config.json
          # 如果没有，先调用makefile的plugin相关规则生成
          mkdir -p ./plugin-build
          cp -r ./contrib/docker-plugin/rootfs ./plugin-build/
          cp ./contrib/docker-plugin/config.json ./plugin-build/
          # 若你Makefile有 make plugin 或 make docker-plugin，可直接用

      - name: Create docker plugin (AMD64示例)
        shell: bash
        run: |
          # PLUGIN_NAME格式必须正确匹配docker要求
          export PLUGIN_TAG=${GITHUB_REF##*/}
          export PLUGIN_NAME=ghcr.io/${{ github.repository }}:${PLUGIN_TAG}
          docker plugin create "$PLUGIN_NAME" ./plugin-build

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push plugin to GHCR
        shell: bash
        run: |
          export PLUGIN_TAG=${GITHUB_REF##*/}
          export PLUGIN_NAME=ghcr.io/${{ github.repository }}:${PLUGIN_TAG}
          docker plugin push "$PLUGIN_NAME"

      # 可选：为不同架构分别build，分tag推送
      # 推荐先实现amd64流程完整跑通，再多平台

